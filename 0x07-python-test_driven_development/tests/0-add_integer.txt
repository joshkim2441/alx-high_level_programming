Usage of the ``0-add_integer`` module
====================================

It defines a function for additon of integers
============================================

The function returns the sum of its two arguments
equivalent to usage of the ``+`` operator
----------------------------------------

Import function from the module:
    >>> add_integer = __import__("0-add_integer").add_integer

Check the docstring for the module:
    >>> m = __import__("0-add_integer").__doc__
    >>> len(m) > 1
	True

Check for function docstring:
	 >>> f = __import__("0-add_integer").add_integer.__doc__
     >>> len(f) > 1
     True

Test with regular integers:

    >>> add_integer(2, 3)
    5

Test with negative and positive:

    >>> add_integer(-6, 8)
    2

Test with float:

    >>> add_integer(2.1, 4)
    6

Test with negative and positive float:

    >>> add_integer(-1.5, 2.5)
    1

Test with mixed types int and float:

    >>> add_integer(1, 2.5)
    3

Test with mixed types float and int:

    >>> add_integer(1.5, 2)
	3

Test with super long int:

    >>> add_integer(999999999999999999999999999999, 1)
    1000000000000000000000000000000

Test with default argument:

    >>> add_integer(1)
    99

Test with non-number and int:

    >>> add_integer("1", 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test if infinity is passed:

    >>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Test with NaN numbers:

    >>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
