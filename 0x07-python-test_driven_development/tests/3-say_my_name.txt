The ``3-say_my_name`` module
======================

Using ``say_my_name``
-------------------

Importing the function from the module:
	    >>> say_my_name = __import__("3-say_my_name").say_my_name

Check for module docstring:
		>>> m = __import__("3-say_my_name").__doc__
		>>> len(m) > 1
		True

Check for function docstring:
		>>> f = __import__("3-say_my_name").say_my_name.__doc__
		>>> len(f) > 1
		True

Test for passing None as first name:
		>>> say_my_name(None, "Joshua")
		Traceback (most recent call last):
		...
		TypeError: first_name must be a string

Test for passing None as last name:
		>>> say_my_name("Joshua", None)
		Traceback (most recent call last):
		...
		TypeError: last_name must be a string

Test for wrong type as first name:
		>>> say_my_name(1, "Joshua")
		Traceback (most recent call last):
		...
		TypeError: first_name must be a string

Test for wrong type as last name:
		>>> say_my_name("Joshua", [4])
		Traceback (most recent call last):
		...
		TypeError: last_name must be a string

Test for normal use:
		>>> say_my_name("Joshua", "John")
		My name is Joshua John
		>>> say_my_name("Lets do this", "Joshua John")
		My name is Lets do this Joshua John

Test for 1 arg:
	 >>> say_my_name("Joshua")
	 My name is Joshua 

Test for more than 2 args:
		>>> say_my_name("Joshua", "John", "Welcome")
		Traceback (most recent call last):
		...
		TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given
