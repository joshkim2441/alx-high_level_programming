Usage of the ``4-print_square`` module
======================================

Importing the function from the module:
	>>> print_square = __import__("4-print_square").print_square

Check for module docstring:
	 >>> m = __import__("4-print_square").__doc__
	 >>> len(m) > 1
	 True

Check for function docstring:
	 >>> f = __import__("4-print_square").print_square.__doc__
     >>> len(f) > 1
     True

Test for no args:
	 >>> print_square()
	 Traceback (most recent call last):
	 ...
	 TypeError: print_square() missing 1 required positional argument: 'size'

Test for too many args
	 >>> print_square(3, 5)
	 Traceback (most recent call last):
	 ...
	 TypeError: print_square() takes 1 positional argument but 2 were given

Test for passing None:
	 >>> print_square(None)
	 Traceback (most recent call last):
	 ...
	 TypeError: size must be an integer

Test for positive ints:
	 >>> print_square(3)
	 ###
	 ###
	 ###
	 >>> print_square(7)
	 #######
	 #######
	 #######
	 #######
	 #######
	 #######
	 #######
	 >>> print_square(0)
	 >>> print_square(1)
	 #

Test for negative ints:
	 >>> print_square(-3)
	 Traceback (most recent call last):
         ...
         ValueError: size must be >= 0

Test for non-number types:
	 >>> print_square((1,))
	 Traceback (most recent call last):
         ...
         TypeError: size must be an integer
	 >>> print_square("8")
	 Traceback (most recent call last):
         ...
         TypeError: size must be an integer
	 >>> print_square(True)
	 Traceback (most recent call last):
         ...
         TypeError: size must be an integer

Test for non-int number types:
	 >>> print_square(3.0)
	 Traceback (most recent call last):
         ...
         TypeError: size must be an integer
	 >>> print_square(-2.5)
	 Traceback (most recent call last):
         ...
         TypeError: size must be an integer
